// openpicus element library v.1.0
var holdEventSlideDelta = 4;
var RefreshTime_ms = 200;

// element - id
var opElementId = 0;
var opElementIdList = [];

function opGetNewIdn() {
    var id = opElementId++;
    return id;
}

function opGetCssId(id) {
    return "op_" + id;
}

function opGetElementById(id) {
    var opEl = opElementIdList[id];
    if (typeof (opEl) == "undefined")
        return null;
    return opEl;
}

// element - type, index
var opElementType = [];
var opElement = [];

function opGetNextIndex(type) {
    var n = opElementType[type];
    if (typeof (n) == "undefined") n = 0;
    else n++;
    return n;
}

function opGetNewIndex(type, value) {
    if (typeof (value) == "undefined" || value == null)
        value = opGetNextIndex(type);
    opElementType[type] = value;
    return value;
}

function opGetElementsByType(type, index) {
    var opList = [];
    for (var i = 0; i < opElement.length; i++) {
        var opEl = opElement[i];

        if (opEl.type == type && opEl.index == index) {
            opList.push(opEl);
        }
    }
    return opList;
}

// element load / parse

function opElementLoad(opelement) {
    opElement = opelement;

    opElementId = 0;
    opElementIdList = [];
    opElementType = [];
    $.each(opElement, function (index, opEl) {
        opGetNewIndex(opEl.type, opEl.index);
        opElementIdList[opEl.id] = opEl;
        if (opEl.idn >= opElementId)
            opElementId = opEl.idn + 1;
    });
}

function convertStringToElement(jsonElementString) {
    opElementLoad(JSON.parse(jsonElementString));
}

function convertElementToString(obj) {
    return JSON.stringify(obj, null, 2);
}

function opGlobal() {
    var T = this;
    this.idn = 0,
    this.id = 'global_0',
    this.type = 'global',
    this.refresh = 200,
    this.background = '#FFFFFF',
    this.width = '800px';
}
function opLabel(i) {
    var T = this;
    this.idn = opGetNewIdn(i);
    this.id = opGetCssId(T.idn);
    this.type = 'label';
    this.index = opGetNewIndex(this.type, null);
    this.class = 'openpicus_' + this.type + '_' + this.index;
    this.typeclass = 'openpicus_' + this.type;
    this.editorclass = 'openpicus_' + this.type + ' openpicus_' + this.type + '_' + this.index + ' mceItemVisualAid mceItemLayer mceNonEditable';
}

function opButton(i) {
    var T = this;
    this.idn = opGetNewIdn(i);
    this.id = opGetCssId(T.idn);
    this.type = 'btn';
    this.index = opGetNewIndex(this.type, i);
    this.class = 'openpicus_' + this.type + '_' + this.index;
    this.typeclass = 'openpicus_' + this.type;
    this.editorclass = 'openpicus_' + this.type + ' openpicus_' + this.type + '_' + this.index + ' mceItemVisualAid mceItemLayer mceNonEditable';

    this.canSendEvents = true; // se true, l'elemento può inviare eventi
    this.link = "";     // eventuale link a un'altra pagina
    this.img_on = "";   // immagine, per status 'on'
    this.img_off = "";  // immagine, per status 'off'
    this.text_on = "";  // testo, per status 'on'
    this.text_off = ""; // testo, per status 'off'
    this.text_style = "";       // stile testo (valido sia per 'on' che per 'off')
    this.text_position = "";    // posizione testo (valido sia per 'on' che per 'off')
    this.noborder = false; // se true, elimina il bordo e lo stile del pulsante
}

function opSlider(i) {
    var T = this;
    this.idn = opGetNewIdn(i);
    this.id = opGetCssId(T.idn);
    this.type = 'sld';
    this.index = opGetNewIndex(this.type, i);
    this.class = 'openpicus_' + this.type + '_' + this.index;
    this.typeclass = 'openpicus_' + this.type;
    this.editorclass = 'openpicus_' + this.type + ' openpicus_' + this.type + '_' + this.index + ' mceItemVisualAid mceItemLayer mceNonEditable';

    this.canSendEvents = true; // se true, l'elemento può inviare eventi
    this.continuousSend = false; // se true, l'elemento invia un evento ad ogni modifica di valore, se false, invia al rilascio della slider
    this.scala_min = 0;     // valore minimo
    this.scala_max = 100;   // valore massimo
    this.step = 1;          // valore di step
}

function opBargraph(i) {
    var T = this;
    this.idn = opGetNewIdn(i);
    this.id = opGetCssId(T.idn);
    this.type = 'bar';
    this.index = opGetNewIndex(this.type, i);
    this.class = 'openpicus_' + this.type + '_' + this.index;
    this.typeclass = 'openpicus_' + this.type;
    this.editorclass = 'openpicus_' + this.type + ' openpicus_' + this.type + '_' + this.index + ' mceItemVisualAid mceItemLayer mceNonEditable';

    //this.canSendEvents = false; // Bargraph solo passivo
    this.scala_min = 0;     // valore minimo
    this.scala_max = 100;   // valore massimo
    this.value = 0;
    this.text_style = "";     // stile testo (valido sia per 'on' che per 'off')
    this.text_position = "";  // posizione testo (valido sia per 'on' che per 'off'), valori: 'left', 'center', 'right'
    this.showValue = false; // visualizza il valore
    this.showPerc = false; // visualizza la percentuale
}

function opCheckbox(i) {
    var T = this;
    this.idn = opGetNewIdn(i);
    this.id = opGetCssId(T.idn);
    this.type = 'chk';
    this.index = opGetNewIndex(this.type, i);
    this.class = 'openpicus_' + this.type + '_' + this.index;
    this.typeclass = 'openpicus_' + this.type;
    this.editorclass = 'openpicus_' + this.type + ' openpicus_' + this.type + '_' + this.index + ' mceItemVisualAid mceItemLayer mceNonEditable';

    this.canSendEvents = true; // se true, l'elemento può inviare eventi
    this.text = "";
    this.checked = false;
}

function opRadiobutton(i) {
    var T = this;
    this.idn = opGetNewIdn(i);
    this.id = opGetCssId(T.idn);
    this.type = 'rad';
    this.index = opGetNewIndex(this.type, i);
    this.class = 'openpicus_' + this.type + '_' + this.index;
    this.typeclass = 'openpicus_' + this.type;
    this.editorclass = 'openpicus_' + this.type + ' openpicus_' + this.type + '_' + this.index + ' mceItemVisualAid mceItemLayer mceNonEditable';

    this.canSendEvents = true; // se true, l'elemento può inviare eventi
    this.group = "";
    this.text = "";
    this.checked = false;
}

function opCreateElement(type) {
    var opEl;

    var result = 0;
    if (type != 'global') {
        var n = opGetNextIndex(type);
        result = window.prompt('Select Index', n);
        if (result == null) return;
        result = parseInt0('' + result);
        if (result < 0) return;
    }

    if (type == 'label')
        opEl = new opLabel(result);
    else if (type == 'btn')
        opEl = new opButton(result);
    else if (type == 'sld')
        opEl = new opSlider(result);
    else if (type == 'bar')
        opEl = new opBargraph(result);
    else if (type == 'chk')
        opEl = new opCheckbox(result);
    else if (type == 'rad')
        opEl = new opRadiobutton(result);
    else if (type == 'global')
        opEl = new opGlobal();
    else return null;

    opElement.push(opEl);
    opElementIdList[opEl.id] = opEl;

    return opEl;
}

var randindex = 0;
function randparam() {
    return '&t=' + (randindex++) + '.' + (Math.random() * 100000000000000000);
}

// Caricamento client
var holdEventSlide = 0;
var currentEventSlide = 0;

function ClientLoad(json_obj) {

    opElementLoad(json_obj);
    
    $.jStorage.set("delay", 50);
    $.jStorage.set("threshold", 250);
    $("#fullColorBtn").css("backgroundcolor","#F36F05");
    
    $.each(opElement, function (index, opEl) {

        if (opEl.type == 'label')
            return;

        var $el = $("#" + opEl.id);

        // creo oggetto html dall'elemento e sostituisco ai segnaposti
        if (opEl.type == 'btn') {
            $el.button();

            if (opEl.canSendEvents) {
                $el.bind("touchstart", function (e) {
                    console.log(opEl);
                    ajaxCall('btn.cgi?i=' + opEl.index + '&e=0' + randparam()); // press
                    StartHold('btn.cgi?i=' + opEl.index + '&e=1' + randparam(), 'btn.cgi?i=' + opEl.index + '&e=2' + randparam()); // hold , release
                });
                $el.bind("touchend", function (e) {
                    StopHold();
                    if (opEl.link != "") {
                        top.location.href = opEl.link;
                    }
                });

                $el.mousedown(function () {
                    console.log(opEl);
                    ajaxCall('btn.cgi?i=' + opEl.index + '&e=0' + randparam()); // press
                    StartHold('btn.cgi?i=' + opEl.index + '&e=1' + randparam(), 'btn.cgi?i=' + opEl.index + '&e=2' + randparam()); // hold , release
                });
                $el.click(function () {
                    StopHold();
                    if (opEl.link != "") {
                        top.location.href = opEl.link;
                    }
                });
            }
        }
        else if (opEl.type == 'sld') {
            $el.slider({
                min: opEl.scala_min,
                max: opEl.scala_max,
                step: opEl.step,
                disabled: !opEl.canSendEvents,
                start: function () {
                    currentEventSlide = 1;
                    if (opEl.canSendEvents && opEl.continuousSend) {
                        ajaxCall('sld.cgi?i=' + opEl.index + '&e=0&v=' + $el.slider("value") + randparam()); // slidestart
                    }
                },
                slide: function () {
                    currentEventSlide = 1;
                    if (opEl.canSendEvents && opEl.continuousSend) {
                        if (holdEventSlide == 0)
                            ajaxCall('sld.cgi?i=' + opEl.index + '&e=1&v=' + $el.slider("value") + randparam()); // slide
                            

                        if (holdEventSlide >= holdEventSlideDelta)
                            holdEventSlide = 0;
                        else
                            holdEventSlide++;
                        
                    }
                },
                stop: function () {
                    currentEventSlide = 0;
                    if (opEl.canSendEvents) {
                    	// Particular case for the delay value, update at the end of the movement only.
                    	if (opEl.id == 'i13'){
                    		$('#lbl13').html($el.slider("value")/1000 + 'sec');
                    		$.jStorage.set("delay", $el.slider("value"));
                    	}
                    	// Particular case for the threshold value
                    	if (opEl.id == 'i14'){
                    		$('#lbl14').html($el.slider("value") + 'cm');
                    		$.jStorage.set("threshold", $el.slider("value"));
                    	}
                    	// Particular case for the angle value
                    	if (opEl.id == 'i15'){
                    		$('#lbl15').html($el.slider("value") + 'deg');
                    		$.jStorage.set("angle", $el.slider("value"));
                    	}
                        ajaxCall('sld.cgi?i=' + opEl.index + '&e=2&v=' + $el.slider("value") + randparam()); // slidestop
                    }
                 
                },
                value: opEl.value
            });
        }
        
        // Confguration of bargraphs
        else if (opEl.type == 'bar') {
            $el.progressbar({ value: 0 });

            //if (typeof (opEl.text_position) != "undefined") {
            //    var style = '';
            //    if (opEl.text_position.indexOf('left') >= 0)
            //        style = 'text-align:left';
            //    else if (opEl.text_position.indexOf('center') >= 0)
            //        style = 'text-align:center';
            //    else if (opEl.text_position.indexOf('right') >= 0)
            //        style = 'text-align:right';

            //    $el.append("<div style='" + style + "' class='ui-progressbar-text " + opEl.class + "_text'></div>");
            //}
        }
        
        // Configuration of Check buttons
        else if (opEl.type == 'chk') {
            var html = $el.html();
            $el.html("");

            var input = $("<input type='checkbox' value='1' id='chk_" + opEl.id + "' name='chk_" + opEl.id + "' style='vertical-align:middle' />");
            input.appendTo($el);
            if (opEl.checked)
                input.attr("checked", "checked");
            if (!opEl.canSendEvents)
                input.attr("disabled", "disabled");

            $el.append("<label for='chk_" + opEl.id + "'>" + html + "</label>");

            if (opEl.canSendEvents) {
                input.change(function (ed, h) {
                    var new_value = ($(this).attr('checked') ? 1 : 0);
                    ajaxCall('chk.cgi?i=' + opEl.index + '&v=' + new_value + randparam()); // new value
                });
            }
        }
        
        // Configuration of radio buttons
        else if (opEl.type == 'rad') {
            var html = $el.html();
            $el.html("");

            var input = $("<input type='radio' value='1' id='rad_" + opEl.id + "' name='rad_" + opEl.group + "' style='vertical-align:middle' />");
            input.appendTo($el);
            if (opEl.checked)
                input.attr("checked", "checked");
            if (!opEl.canSendEvents)
                input.attr("disabled", "disabled");

            $el.append("<label for='rad_" + opEl.id + "'>" + html + "</label>");

            if (opEl.canSendEvents) {
                input.change(function (ed, h) {
                    var new_value = ($(this).attr('checked') ? 1 : 0);
                    ajaxCall('rad.cgi?i=' + opEl.index + '&v=' + new_value + randparam()); // new value
                });
            }
        }
        else if (opEl.type == 'global') {
            RefreshTime_ms = opEl.refresh;
        }
    });

    // avvia lettura file di stato dal dispositivo
    ajaxCall('status.xml', updateStatus, RefreshTime_ms);
}

var holdEvent = false;
var holdEventH = 0;
var holdEventParamHold = '';
var holdEventParamStop = '';
$(document).click(function (e) {
    StopHold();
});
$(document).bind("touchend", function (e) {
    StopHold();
});
function StartHold(paramHold, paramStop) {
    holdEvent = true;
    holdEventParamHold = paramHold;
    holdEventParamStop = paramStop;
    holdEventH = setTimeout(function () {
        if (holdEvent) {
            ajaxCall(holdEventParamHold);
        }
    }, 200);
}
function StopHold() {
    if (holdEvent) {
        holdEvent = false;
        clearInterval(holdEventH);
        ajaxCall(holdEventParamStop);
        holdEventH = 0;
        holdEventP = '';
    }
}

var updateStatusError = false;

function parseInt0(s) {
    try {
        var v = parseInt(s);
        if (isNaN(v)) return -1;
        return v;
    }
    catch (ex) {
        return -1;
    }
}

// Reading the status.xml file, containing all the information
function updateStatus(xmldoc, status, request) {
    if (!xmldoc || status != "success") {
        // Check if a timeout occurred
        if (!updateStatusError) {
            updateStatusError = true;
            $("#page").hide();
            $("#loading").show();
        }
        return;
    }
    else {
        if (updateStatusError) {
            updateStatusError = false;
            $("#page").show();
            $("#loading").hide();
        }
    }

    // status.xml
    var xel = xmldoc.firstChild.firstChild; // root/response/element
    while (xel != null) {
        var s = xel.tagName;
        if (s != null) {
            var v = xel.textContent;
            if (s.indexOf('btn') == 0) {
                var i = parseInt0(s.substring(3));
                XmlFoundBtn(i, v);
            }
            if (s.indexOf('sld') == 0) {
                var i = parseInt0(s.substring(3));
                v = parseInt0(v);
                XmlFoundSld(i, v);
            }
            if (s.indexOf('bar') == 0) {
                var i = parseInt0(s.substring(3));
                v = parseInt0(v);
                XmlFoundBar(i, v);
            }
            if (s.indexOf('chk') == 0) {
                var i = parseInt0(s.substring(3));
                XmlFoundChk(i, v);
            }
            if (s.indexOf('rad') == 0) {
                var i = parseInt0(s.substring(3));
                XmlFoundRad(i, v);
            }
            if (s.indexOf('label') == 0) {
                var i = parseInt0(s.substring(5));
                XmlFoundLabel(i, v);
            }
        }
        xel = xel.nextSibling;
    }

}

function XmlFoundLabel(i, v) {
    if (i < 0) return;
    if (i == 0) {
    	console.log(v);
    	if (v == 0){
    	     $("#lbl_touche").html('NO CONTACT (0)');
	}
    	else if (v == 1){
    	     $("#lbl_touche").html('CONTACT (1)');
    	}
    }
    else if (i == 1) {
    	// Changing the color
    	if (v==1) {
    	     //black
    	     $('#color_sensor').css("background-color", "#000000");
    	}
    	if (v==2) {
    	     //blue
    	     $('#color_sensor').css("background-color", "#1500FF");
    	}
    	if (v==3) {
    	     //green
    	     $('#color_sensor').css("background-color", "#04B018");
    	}
    	if (v==4) {
    	     //yellow
    	     $('#color_sensor').css("background-color", "#FCE700");
    	}
    	if (v==5) {
    	     //red
    	     $('#color_sensor').css("background-color", "#FC0000");
    	}
    	if (v==6) {
    	     //white
    	     $('#color_sensor').css("background-color", "#FFFFFF");
    	}
    }
    else if (i == 2) {
    	$("#i16").slider({ value: v });
    	$("#lbl16").html(v + 'cm');
    }
}

function XmlFoundBtn(i, v) {
    if (i < 0) return;
    var opList = opGetElementsByType('btn', i);
    if (opList.length == 0) return;

    $.each(opList, function (index, opEl) {
        if (v == 'dn') {
            if (typeof (opEl.text_on) != "undefined" && opEl.text_on.length > 0)
                $("#" + opEl.id).button("option", "label", opEl.text_on);

            if (typeof (opEl.img_on) != "undefined" && opEl.img_on.length > 0)
                $("#" + opEl.id).css({ 'background-image': 'url("' + opEl.img_on + '")', 'background-repeat': 'repeat' });
        }
        if (v == 'up') {
            if (typeof (opEl.text_off) != "undefined" && opEl.text_off.length > 0)
                $("#" + opEl.id).button("option", "label", opEl.text_off);

            if (typeof (opEl.img_off) != "undefined" && opEl.img_off.length > 0)
                $("#" + opEl.id).css({ 'background-image': 'url("' + opEl.img_off + '")', 'background-repeat': 'repeat' });
        }
    });
}

function XmlFoundSld(i, v) {
    if (i < 0 || v < 0) return;
    var opList = opGetElementsByType('sld', i);
    if (opList.length == 0) return;

    $.each(opList, function (index, opEl) {
        //if (!opEl.canSendEvents) {
        if (currentEventSlide != 1) {
            $("#" + opEl.id).slider({ value: v });
        }
    });
}

function XmlFoundBar(i, v) {
    if (i < 0 || v < 0) return;
    var opList = opGetElementsByType('bar', i);
    if (opList.length == 0) return;

    $.each(opList, function (index, opEl) {
        var v_perc = 100 * v / ((opEl.scala_max > opEl.scala_min) ? opEl.scala_max - opEl.scala_min : 1);
        $("#" + opEl.id).progressbar({ value: v_perc });

        if (opEl.showPerc)
            $("#" + opEl.id + " ." + opEl.class + "_text").html("" + v_perc + "%");

        if (opEl.showValue)
            $("#" + opEl.id + " ." + opEl.class + "_text").html("" + v);
    });
}

function XmlFoundChk(i, v) {
    if (i < 0 || v < 0) return;
    var opList = opGetElementsByType('chk', i);
    if (opList.length == 0) return;

    $.each(opList, function (index, opEl) {
        var ichk = $("#chk_" + opEl.id);
        if (v == 'on') {
            ichk.attr('checked', true);
        }
        if (v == 'off') {
            ichk.attr('checked', false);
        }

    });
}

function XmlFoundRad(i, v) {
    if (i < 0 || v < 0) return;
    var opList = opGetElementsByType('rad', i);
    if (opList.length == 0) return;

    $.each(opList, function (index, opEl) {
        var irad = $("#rad_" + opEl.id);
        if (v == 'on') {
            irad.attr('checked', true);
        }
        if (v == 'off') {
            irad.attr('checked', false);
        }

    });
}

function ajaxCall(s, fn, repeat_ms) {
    // This sets out a delay for the sending and the recovery of data from the rover.
    setTimeout(function () { ajaxCall2(s, fn, repeat_ms); }, $.jStorage.get("delay"));
}

function ajaxCall2(s, fn, repeat_ms) {
    if (typeof (s) == "undefined" || s == null || s.length == 0) return;

    $.ajax({
        url: s,
        context: document.body
    }).done(function (xmldoc, status, request) {
        if (typeof (fn) != "undefined") {
            fn(xmldoc, status, request);
        }
        if (typeof (repeat_ms) != "undefined" && repeat_ms > 0) {
            $('#lbl_delay').html($.jStorage.get("delay") + ' ms');
            setTimeout(function () { ajaxCall(s, fn, repeat_ms); }, repeat_ms);
        }
    });
}



